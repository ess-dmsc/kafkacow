//clang-format off
// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_F142LOGDATA_H_
#define FLATBUFFERS_GENERATED_F142LOGDATA_H_

#include "flatbuffers/flatbuffers.h"

#include "fwdi_forwarder_internal_generated.h"

struct Byte;

struct UByte;

struct Short;

struct UShort;

struct Int;

struct UInt;

struct Long;

struct ULong;

struct Float;

struct Double;

struct String;

struct ArrayByte;

struct ArrayUByte;

struct ArrayShort;

struct ArrayUShort;

struct ArrayInt;

struct ArrayUInt;

struct ArrayLong;

struct ArrayULong;

struct ArrayFloat;

struct ArrayDouble;

struct ArrayString;

struct LogData;

enum Value {
  Value_NONE = 0,
  Value_Byte = 1,
  Value_UByte = 2,
  Value_Short = 3,
  Value_UShort = 4,
  Value_Int = 5,
  Value_UInt = 6,
  Value_Long = 7,
  Value_ULong = 8,
  Value_Float = 9,
  Value_Double = 10,
  Value_ArrayByte = 11,
  Value_ArrayUByte = 12,
  Value_ArrayShort = 13,
  Value_ArrayUShort = 14,
  Value_ArrayInt = 15,
  Value_ArrayUInt = 16,
  Value_ArrayLong = 17,
  Value_ArrayULong = 18,
  Value_ArrayFloat = 19,
  Value_ArrayDouble = 20,
  Value_String = 21,
  Value_ArrayString = 22,
  Value_MIN = Value_NONE,
  Value_MAX = Value_ArrayString
};

inline const Value (&EnumValuesValue())[23] {
  static const Value values[] = {
    Value_NONE,
    Value_Byte,
    Value_UByte,
    Value_Short,
    Value_UShort,
    Value_Int,
    Value_UInt,
    Value_Long,
    Value_ULong,
    Value_Float,
    Value_Double,
    Value_ArrayByte,
    Value_ArrayUByte,
    Value_ArrayShort,
    Value_ArrayUShort,
    Value_ArrayInt,
    Value_ArrayUInt,
    Value_ArrayLong,
    Value_ArrayULong,
    Value_ArrayFloat,
    Value_ArrayDouble,
    Value_String,
    Value_ArrayString
  };
  return values;
}

inline const char * const *EnumNamesValue() {
  static const char * const names[] = {
    "NONE",
    "Byte",
    "UByte",
    "Short",
    "UShort",
    "Int",
    "UInt",
    "Long",
    "ULong",
    "Float",
    "Double",
    "ArrayByte",
    "ArrayUByte",
    "ArrayShort",
    "ArrayUShort",
    "ArrayInt",
    "ArrayUInt",
    "ArrayLong",
    "ArrayULong",
    "ArrayFloat",
    "ArrayDouble",
    "String",
    "ArrayString",
    nullptr
  };
  return names;
}

inline const char *EnumNameValue(Value e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesValue()[index];
}

template<typename T> struct ValueTraits {
  static const Value enum_value = Value_NONE;
};

template<> struct ValueTraits<Byte> {
  static const Value enum_value = Value_Byte;
};

template<> struct ValueTraits<UByte> {
  static const Value enum_value = Value_UByte;
};

template<> struct ValueTraits<Short> {
  static const Value enum_value = Value_Short;
};

template<> struct ValueTraits<UShort> {
  static const Value enum_value = Value_UShort;
};

template<> struct ValueTraits<Int> {
  static const Value enum_value = Value_Int;
};

template<> struct ValueTraits<UInt> {
  static const Value enum_value = Value_UInt;
};

template<> struct ValueTraits<Long> {
  static const Value enum_value = Value_Long;
};

template<> struct ValueTraits<ULong> {
  static const Value enum_value = Value_ULong;
};

template<> struct ValueTraits<Float> {
  static const Value enum_value = Value_Float;
};

template<> struct ValueTraits<Double> {
  static const Value enum_value = Value_Double;
};

template<> struct ValueTraits<ArrayByte> {
  static const Value enum_value = Value_ArrayByte;
};

template<> struct ValueTraits<ArrayUByte> {
  static const Value enum_value = Value_ArrayUByte;
};

template<> struct ValueTraits<ArrayShort> {
  static const Value enum_value = Value_ArrayShort;
};

template<> struct ValueTraits<ArrayUShort> {
  static const Value enum_value = Value_ArrayUShort;
};

template<> struct ValueTraits<ArrayInt> {
  static const Value enum_value = Value_ArrayInt;
};

template<> struct ValueTraits<ArrayUInt> {
  static const Value enum_value = Value_ArrayUInt;
};

template<> struct ValueTraits<ArrayLong> {
  static const Value enum_value = Value_ArrayLong;
};

template<> struct ValueTraits<ArrayULong> {
  static const Value enum_value = Value_ArrayULong;
};

template<> struct ValueTraits<ArrayFloat> {
  static const Value enum_value = Value_ArrayFloat;
};

template<> struct ValueTraits<ArrayDouble> {
  static const Value enum_value = Value_ArrayDouble;
};

template<> struct ValueTraits<String> {
  static const Value enum_value = Value_String;
};

template<> struct ValueTraits<ArrayString> {
  static const Value enum_value = Value_ArrayString;
};

bool VerifyValue(flatbuffers::Verifier &verifier, const void *obj, Value type);
bool VerifyValueVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Byte FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int8_t value() const {
    return GetField<int8_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct ByteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int8_t value) {
    fbb_.AddElement<int8_t>(Byte::VT_VALUE, value, 0);
  }
  explicit ByteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ByteBuilder &operator=(const ByteBuilder &);
  flatbuffers::Offset<Byte> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Byte>(end);
    return o;
  }
};

inline flatbuffers::Offset<Byte> CreateByte(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t value = 0) {
  ByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct UByte FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint8_t value() const {
    return GetField<uint8_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct UByteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) {
    fbb_.AddElement<uint8_t>(UByte::VT_VALUE, value, 0);
  }
  explicit UByteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UByteBuilder &operator=(const UByteBuilder &);
  flatbuffers::Offset<UByte> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UByte>(end);
    return o;
  }
};

inline flatbuffers::Offset<UByte> CreateUByte(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t value = 0) {
  UByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Short FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int16_t value() const {
    return GetField<int16_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct ShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int16_t value) {
    fbb_.AddElement<int16_t>(Short::VT_VALUE, value, 0);
  }
  explicit ShortBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShortBuilder &operator=(const ShortBuilder &);
  flatbuffers::Offset<Short> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Short>(end);
    return o;
  }
};

inline flatbuffers::Offset<Short> CreateShort(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t value = 0) {
  ShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct UShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint16_t value() const {
    return GetField<uint16_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct UShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint16_t value) {
    fbb_.AddElement<uint16_t>(UShort::VT_VALUE, value, 0);
  }
  explicit UShortBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UShortBuilder &operator=(const UShortBuilder &);
  flatbuffers::Offset<UShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UShort>(end);
    return o;
  }
};

inline flatbuffers::Offset<UShort> CreateUShort(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t value = 0) {
  UShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Int FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct IntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(Int::VT_VALUE, value, 0);
  }
  explicit IntBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IntBuilder &operator=(const IntBuilder &);
  flatbuffers::Offset<Int> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Int>(end);
    return o;
  }
};

inline flatbuffers::Offset<Int> CreateInt(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t value = 0) {
  IntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct UInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint32_t value() const {
    return GetField<uint32_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct UIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint32_t value) {
    fbb_.AddElement<uint32_t>(UInt::VT_VALUE, value, 0);
  }
  explicit UIntBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UIntBuilder &operator=(const UIntBuilder &);
  flatbuffers::Offset<UInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UInt>(end);
    return o;
  }
};

inline flatbuffers::Offset<UInt> CreateUInt(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t value = 0) {
  UIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Long FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int64_t value() const {
    return GetField<int64_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct LongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int64_t value) {
    fbb_.AddElement<int64_t>(Long::VT_VALUE, value, 0);
  }
  explicit LongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LongBuilder &operator=(const LongBuilder &);
  flatbuffers::Offset<Long> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Long>(end);
    return o;
  }
};

inline flatbuffers::Offset<Long> CreateLong(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t value = 0) {
  LongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct ULong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint64_t value() const {
    return GetField<uint64_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct ULongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint64_t value) {
    fbb_.AddElement<uint64_t>(ULong::VT_VALUE, value, 0);
  }
  explicit ULongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ULongBuilder &operator=(const ULongBuilder &);
  flatbuffers::Offset<ULong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ULong>(end);
    return o;
  }
};

inline flatbuffers::Offset<ULong> CreateULong(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t value = 0) {
  ULongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Float FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct FloatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(float value) {
    fbb_.AddElement<float>(Float::VT_VALUE, value, 0.0f);
  }
  explicit FloatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FloatBuilder &operator=(const FloatBuilder &);
  flatbuffers::Offset<Float> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Float>(end);
    return o;
  }
};

inline flatbuffers::Offset<Float> CreateFloat(
    flatbuffers::FlatBufferBuilder &_fbb,
    float value = 0.0f) {
  FloatBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Double FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct DoubleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(double value) {
    fbb_.AddElement<double>(Double::VT_VALUE, value, 0.0);
  }
  explicit DoubleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DoubleBuilder &operator=(const DoubleBuilder &);
  flatbuffers::Offset<Double> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Double>(end);
    return o;
  }
};

inline flatbuffers::Offset<Double> CreateDouble(
    flatbuffers::FlatBufferBuilder &_fbb,
    double value = 0.0) {
  DoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct String FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::String *value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct StringBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) {
    fbb_.AddOffset(String::VT_VALUE, value);
  }
  explicit StringBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StringBuilder &operator=(const StringBuilder &);
  flatbuffers::Offset<String> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<String>(end);
    return o;
  }
};

inline flatbuffers::Offset<String> CreateString(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  StringBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<String> CreateStringDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  return CreateString(
      _fbb,
      value ? _fbb.CreateString(value) : 0);
}

struct ArrayByte FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<int8_t> *value() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct ArrayByteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<int8_t>> value) {
    fbb_.AddOffset(ArrayByte::VT_VALUE, value);
  }
  explicit ArrayByteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayByteBuilder &operator=(const ArrayByteBuilder &);
  flatbuffers::Offset<ArrayByte> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayByte>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayByte> CreateArrayByte(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> value = 0) {
  ArrayByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayByte> CreateArrayByteDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *value = nullptr) {
  return CreateArrayByte(
      _fbb,
      value ? _fbb.CreateVector<int8_t>(*value) : 0);
}

struct ArrayUByte FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct ArrayUByteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(ArrayUByte::VT_VALUE, value);
  }
  explicit ArrayUByteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayUByteBuilder &operator=(const ArrayUByteBuilder &);
  flatbuffers::Offset<ArrayUByte> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayUByte>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayUByte> CreateArrayUByte(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value = 0) {
  ArrayUByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayUByte> CreateArrayUByteDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr) {
  return CreateArrayUByte(
      _fbb,
      value ? _fbb.CreateVector<uint8_t>(*value) : 0);
}

struct ArrayShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<int16_t> *value() const {
    return GetPointer<const flatbuffers::Vector<int16_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct ArrayShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<int16_t>> value) {
    fbb_.AddOffset(ArrayShort::VT_VALUE, value);
  }
  explicit ArrayShortBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayShortBuilder &operator=(const ArrayShortBuilder &);
  flatbuffers::Offset<ArrayShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayShort>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayShort> CreateArrayShort(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int16_t>> value = 0) {
  ArrayShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayShort> CreateArrayShortDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int16_t> *value = nullptr) {
  return CreateArrayShort(
      _fbb,
      value ? _fbb.CreateVector<int16_t>(*value) : 0);
}

struct ArrayUShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<uint16_t> *value() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct ArrayUShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> value) {
    fbb_.AddOffset(ArrayUShort::VT_VALUE, value);
  }
  explicit ArrayUShortBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayUShortBuilder &operator=(const ArrayUShortBuilder &);
  flatbuffers::Offset<ArrayUShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayUShort>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayUShort> CreateArrayUShort(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> value = 0) {
  ArrayUShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayUShort> CreateArrayUShortDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *value = nullptr) {
  return CreateArrayUShort(
      _fbb,
      value ? _fbb.CreateVector<uint16_t>(*value) : 0);
}

struct ArrayInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<int32_t> *value() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct ArrayIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<int32_t>> value) {
    fbb_.AddOffset(ArrayInt::VT_VALUE, value);
  }
  explicit ArrayIntBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayIntBuilder &operator=(const ArrayIntBuilder &);
  flatbuffers::Offset<ArrayInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayInt>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayInt> CreateArrayInt(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> value = 0) {
  ArrayIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayInt> CreateArrayIntDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *value = nullptr) {
  return CreateArrayInt(
      _fbb,
      value ? _fbb.CreateVector<int32_t>(*value) : 0);
}

struct ArrayUInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<uint32_t> *value() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct ArrayUIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> value) {
    fbb_.AddOffset(ArrayUInt::VT_VALUE, value);
  }
  explicit ArrayUIntBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayUIntBuilder &operator=(const ArrayUIntBuilder &);
  flatbuffers::Offset<ArrayUInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayUInt>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayUInt> CreateArrayUInt(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> value = 0) {
  ArrayUIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayUInt> CreateArrayUIntDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *value = nullptr) {
  return CreateArrayUInt(
      _fbb,
      value ? _fbb.CreateVector<uint32_t>(*value) : 0);
}

struct ArrayLong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<int64_t> *value() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct ArrayLongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<int64_t>> value) {
    fbb_.AddOffset(ArrayLong::VT_VALUE, value);
  }
  explicit ArrayLongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayLongBuilder &operator=(const ArrayLongBuilder &);
  flatbuffers::Offset<ArrayLong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayLong>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayLong> CreateArrayLong(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> value = 0) {
  ArrayLongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayLong> CreateArrayLongDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int64_t> *value = nullptr) {
  return CreateArrayLong(
      _fbb,
      value ? _fbb.CreateVector<int64_t>(*value) : 0);
}

struct ArrayULong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<uint64_t> *value() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct ArrayULongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> value) {
    fbb_.AddOffset(ArrayULong::VT_VALUE, value);
  }
  explicit ArrayULongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayULongBuilder &operator=(const ArrayULongBuilder &);
  flatbuffers::Offset<ArrayULong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayULong>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayULong> CreateArrayULong(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> value = 0) {
  ArrayULongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayULong> CreateArrayULongDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *value = nullptr) {
  return CreateArrayULong(
      _fbb,
      value ? _fbb.CreateVector<uint64_t>(*value) : 0);
}

struct ArrayFloat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<float> *value() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct ArrayFloatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<float>> value) {
    fbb_.AddOffset(ArrayFloat::VT_VALUE, value);
  }
  explicit ArrayFloatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayFloatBuilder &operator=(const ArrayFloatBuilder &);
  flatbuffers::Offset<ArrayFloat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayFloat>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayFloat> CreateArrayFloat(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> value = 0) {
  ArrayFloatBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayFloat> CreateArrayFloatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *value = nullptr) {
  return CreateArrayFloat(
      _fbb,
      value ? _fbb.CreateVector<float>(*value) : 0);
}

struct ArrayDouble FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<double> *value() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct ArrayDoubleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<double>> value) {
    fbb_.AddOffset(ArrayDouble::VT_VALUE, value);
  }
  explicit ArrayDoubleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayDoubleBuilder &operator=(const ArrayDoubleBuilder &);
  flatbuffers::Offset<ArrayDouble> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayDouble>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayDouble> CreateArrayDouble(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<double>> value = 0) {
  ArrayDoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayDouble> CreateArrayDoubleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *value = nullptr) {
  return CreateArrayDouble(
      _fbb,
      value ? _fbb.CreateVector<double>(*value) : 0);
}

struct ArrayString FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *value() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.VerifyVectorOfStrings(value()) &&
           verifier.EndTable();
  }
};

struct ArrayStringBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> value) {
    fbb_.AddOffset(ArrayString::VT_VALUE, value);
  }
  explicit ArrayStringBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayStringBuilder &operator=(const ArrayStringBuilder &);
  flatbuffers::Offset<ArrayString> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayString>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayString> CreateArrayString(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> value = 0) {
  ArrayStringBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayString> CreateArrayStringDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *value = nullptr) {
  return CreateArrayString(
      _fbb,
      value ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*value) : 0);
}

struct LogData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SOURCE_NAME = 4,
    VT_VALUE_TYPE = 6,
    VT_VALUE = 8,
    VT_TIMESTAMP = 10,
    VT_FWDINFO_TYPE = 12,
    VT_FWDINFO = 14
  };
  const flatbuffers::String *source_name() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE_NAME);
  }
  Value value_type() const {
    return static_cast<Value>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Byte *value_as_Byte() const {
    return value_type() == Value_Byte ? static_cast<const Byte *>(value()) : nullptr;
  }
  const UByte *value_as_UByte() const {
    return value_type() == Value_UByte ? static_cast<const UByte *>(value()) : nullptr;
  }
  const Short *value_as_Short() const {
    return value_type() == Value_Short ? static_cast<const Short *>(value()) : nullptr;
  }
  const UShort *value_as_UShort() const {
    return value_type() == Value_UShort ? static_cast<const UShort *>(value()) : nullptr;
  }
  const Int *value_as_Int() const {
    return value_type() == Value_Int ? static_cast<const Int *>(value()) : nullptr;
  }
  const UInt *value_as_UInt() const {
    return value_type() == Value_UInt ? static_cast<const UInt *>(value()) : nullptr;
  }
  const Long *value_as_Long() const {
    return value_type() == Value_Long ? static_cast<const Long *>(value()) : nullptr;
  }
  const ULong *value_as_ULong() const {
    return value_type() == Value_ULong ? static_cast<const ULong *>(value()) : nullptr;
  }
  const Float *value_as_Float() const {
    return value_type() == Value_Float ? static_cast<const Float *>(value()) : nullptr;
  }
  const Double *value_as_Double() const {
    return value_type() == Value_Double ? static_cast<const Double *>(value()) : nullptr;
  }
  const ArrayByte *value_as_ArrayByte() const {
    return value_type() == Value_ArrayByte ? static_cast<const ArrayByte *>(value()) : nullptr;
  }
  const ArrayUByte *value_as_ArrayUByte() const {
    return value_type() == Value_ArrayUByte ? static_cast<const ArrayUByte *>(value()) : nullptr;
  }
  const ArrayShort *value_as_ArrayShort() const {
    return value_type() == Value_ArrayShort ? static_cast<const ArrayShort *>(value()) : nullptr;
  }
  const ArrayUShort *value_as_ArrayUShort() const {
    return value_type() == Value_ArrayUShort ? static_cast<const ArrayUShort *>(value()) : nullptr;
  }
  const ArrayInt *value_as_ArrayInt() const {
    return value_type() == Value_ArrayInt ? static_cast<const ArrayInt *>(value()) : nullptr;
  }
  const ArrayUInt *value_as_ArrayUInt() const {
    return value_type() == Value_ArrayUInt ? static_cast<const ArrayUInt *>(value()) : nullptr;
  }
  const ArrayLong *value_as_ArrayLong() const {
    return value_type() == Value_ArrayLong ? static_cast<const ArrayLong *>(value()) : nullptr;
  }
  const ArrayULong *value_as_ArrayULong() const {
    return value_type() == Value_ArrayULong ? static_cast<const ArrayULong *>(value()) : nullptr;
  }
  const ArrayFloat *value_as_ArrayFloat() const {
    return value_type() == Value_ArrayFloat ? static_cast<const ArrayFloat *>(value()) : nullptr;
  }
  const ArrayDouble *value_as_ArrayDouble() const {
    return value_type() == Value_ArrayDouble ? static_cast<const ArrayDouble *>(value()) : nullptr;
  }
  const String *value_as_String() const {
    return value_type() == Value_String ? static_cast<const String *>(value()) : nullptr;
  }
  const ArrayString *value_as_ArrayString() const {
    return value_type() == Value_ArrayString ? static_cast<const ArrayString *>(value()) : nullptr;
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  forwarder_internal fwdinfo_type() const {
    return static_cast<forwarder_internal>(GetField<uint8_t>(VT_FWDINFO_TYPE, 0));
  }
  const void *fwdinfo() const {
    return GetPointer<const void *>(VT_FWDINFO);
  }
  template<typename T> const T *fwdinfo_as() const;
  const fwdinfo_1_t *fwdinfo_as_fwdinfo_1_t() const {
    return fwdinfo_type() == forwarder_internal_fwdinfo_1_t ? static_cast<const fwdinfo_1_t *>(fwdinfo()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SOURCE_NAME) &&
           verifier.Verify(source_name()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyValue(verifier, value(), value_type()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<uint8_t>(verifier, VT_FWDINFO_TYPE) &&
           VerifyOffset(verifier, VT_FWDINFO) &&
           Verifyforwarder_internal(verifier, fwdinfo(), fwdinfo_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Byte *LogData::value_as<Byte>() const {
  return value_as_Byte();
}

template<> inline const UByte *LogData::value_as<UByte>() const {
  return value_as_UByte();
}

template<> inline const Short *LogData::value_as<Short>() const {
  return value_as_Short();
}

template<> inline const UShort *LogData::value_as<UShort>() const {
  return value_as_UShort();
}

template<> inline const Int *LogData::value_as<Int>() const {
  return value_as_Int();
}

template<> inline const UInt *LogData::value_as<UInt>() const {
  return value_as_UInt();
}

template<> inline const Long *LogData::value_as<Long>() const {
  return value_as_Long();
}

template<> inline const ULong *LogData::value_as<ULong>() const {
  return value_as_ULong();
}

template<> inline const Float *LogData::value_as<Float>() const {
  return value_as_Float();
}

template<> inline const Double *LogData::value_as<Double>() const {
  return value_as_Double();
}

template<> inline const ArrayByte *LogData::value_as<ArrayByte>() const {
  return value_as_ArrayByte();
}

template<> inline const ArrayUByte *LogData::value_as<ArrayUByte>() const {
  return value_as_ArrayUByte();
}

template<> inline const ArrayShort *LogData::value_as<ArrayShort>() const {
  return value_as_ArrayShort();
}

template<> inline const ArrayUShort *LogData::value_as<ArrayUShort>() const {
  return value_as_ArrayUShort();
}

template<> inline const ArrayInt *LogData::value_as<ArrayInt>() const {
  return value_as_ArrayInt();
}

template<> inline const ArrayUInt *LogData::value_as<ArrayUInt>() const {
  return value_as_ArrayUInt();
}

template<> inline const ArrayLong *LogData::value_as<ArrayLong>() const {
  return value_as_ArrayLong();
}

template<> inline const ArrayULong *LogData::value_as<ArrayULong>() const {
  return value_as_ArrayULong();
}

template<> inline const ArrayFloat *LogData::value_as<ArrayFloat>() const {
  return value_as_ArrayFloat();
}

template<> inline const ArrayDouble *LogData::value_as<ArrayDouble>() const {
  return value_as_ArrayDouble();
}

template<> inline const String *LogData::value_as<String>() const {
  return value_as_String();
}

template<> inline const ArrayString *LogData::value_as<ArrayString>() const {
  return value_as_ArrayString();
}

template<> inline const fwdinfo_1_t *LogData::fwdinfo_as<fwdinfo_1_t>() const {
  return fwdinfo_as_fwdinfo_1_t();
}

struct LogDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_source_name(flatbuffers::Offset<flatbuffers::String> source_name) {
    fbb_.AddOffset(LogData::VT_SOURCE_NAME, source_name);
  }
  void add_value_type(Value value_type) {
    fbb_.AddElement<uint8_t>(LogData::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(flatbuffers::Offset<void> value) {
    fbb_.AddOffset(LogData::VT_VALUE, value);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(LogData::VT_TIMESTAMP, timestamp, 0);
  }
  void add_fwdinfo_type(forwarder_internal fwdinfo_type) {
    fbb_.AddElement<uint8_t>(LogData::VT_FWDINFO_TYPE, static_cast<uint8_t>(fwdinfo_type), 0);
  }
  void add_fwdinfo(flatbuffers::Offset<void> fwdinfo) {
    fbb_.AddOffset(LogData::VT_FWDINFO, fwdinfo);
  }
  explicit LogDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogDataBuilder &operator=(const LogDataBuilder &);
  flatbuffers::Offset<LogData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogData>(end);
    return o;
  }
};

inline flatbuffers::Offset<LogData> CreateLogData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> source_name = 0,
    Value value_type = Value_NONE,
    flatbuffers::Offset<void> value = 0,
    uint64_t timestamp = 0,
    forwarder_internal fwdinfo_type = forwarder_internal_NONE,
    flatbuffers::Offset<void> fwdinfo = 0) {
  LogDataBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_fwdinfo(fwdinfo);
  builder_.add_value(value);
  builder_.add_source_name(source_name);
  builder_.add_fwdinfo_type(fwdinfo_type);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<LogData> CreateLogDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *source_name = nullptr,
    Value value_type = Value_NONE,
    flatbuffers::Offset<void> value = 0,
    uint64_t timestamp = 0,
    forwarder_internal fwdinfo_type = forwarder_internal_NONE,
    flatbuffers::Offset<void> fwdinfo = 0) {
  return CreateLogData(
      _fbb,
      source_name ? _fbb.CreateString(source_name) : 0,
      value_type,
      value,
      timestamp,
      fwdinfo_type,
      fwdinfo);
}

inline bool VerifyValue(flatbuffers::Verifier &verifier, const void *obj, Value type) {
  switch (type) {
    case Value_NONE: {
      return true;
    }
    case Value_Byte: {
      auto ptr = reinterpret_cast<const Byte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_UByte: {
      auto ptr = reinterpret_cast<const UByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_Short: {
      auto ptr = reinterpret_cast<const Short *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_UShort: {
      auto ptr = reinterpret_cast<const UShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_Int: {
      auto ptr = reinterpret_cast<const Int *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_UInt: {
      auto ptr = reinterpret_cast<const UInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_Long: {
      auto ptr = reinterpret_cast<const Long *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ULong: {
      auto ptr = reinterpret_cast<const ULong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_Float: {
      auto ptr = reinterpret_cast<const Float *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_Double: {
      auto ptr = reinterpret_cast<const Double *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayByte: {
      auto ptr = reinterpret_cast<const ArrayByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayUByte: {
      auto ptr = reinterpret_cast<const ArrayUByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayShort: {
      auto ptr = reinterpret_cast<const ArrayShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayUShort: {
      auto ptr = reinterpret_cast<const ArrayUShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayInt: {
      auto ptr = reinterpret_cast<const ArrayInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayUInt: {
      auto ptr = reinterpret_cast<const ArrayUInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayLong: {
      auto ptr = reinterpret_cast<const ArrayLong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayULong: {
      auto ptr = reinterpret_cast<const ArrayULong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayFloat: {
      auto ptr = reinterpret_cast<const ArrayFloat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayDouble: {
      auto ptr = reinterpret_cast<const ArrayDouble *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_String: {
      auto ptr = reinterpret_cast<const String *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value_ArrayString: {
      auto ptr = reinterpret_cast<const ArrayString *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyValueVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyValue(
        verifier,  values->Get(i), types->GetEnum<Value>(i))) {
      return false;
    }
  }
  return true;
}

inline const LogData *GetLogData(const void *buf) {
  return flatbuffers::GetRoot<LogData>(buf);
}

inline const LogData *GetSizePrefixedLogData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<LogData>(buf);
}

inline const char *LogDataIdentifier() {
  return "f142";
}

inline bool LogDataBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, LogDataIdentifier());
}

inline bool VerifyLogDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LogData>(LogDataIdentifier());
}

inline bool VerifySizePrefixedLogDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LogData>(LogDataIdentifier());
}

inline void FinishLogDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<LogData> root) {
  fbb.Finish(root, LogDataIdentifier());
}

inline void FinishSizePrefixedLogDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<LogData> root) {
  fbb.FinishSizePrefixed(root, LogDataIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_F142LOGDATA_H_
